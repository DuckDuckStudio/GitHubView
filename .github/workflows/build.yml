name: 打包与构建发行版文件

on:
  workflow_dispatch:
    inputs:
      version:
        description: '版本号'
        required: true

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        arch: [x86, x64, arm, arm64]

    steps:
    - name: 检出代码
      if: ${{ !((runner.os == 'Linux' && matrix.arch == 'x86') || (runner.os == 'Windows' && matrix.arch == 'arm')) }}
      uses: actions/checkout@v4

    - name: 设置 .NET 8.0.x
      if: ${{ !((runner.os == 'Linux' && matrix.arch == 'x86') || (runner.os == 'Windows' && matrix.arch == 'arm')) }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: 设置 Python 3.x
      if: ${{ !((runner.os == 'Linux' && matrix.arch == 'x86') || (runner.os == 'Windows' && matrix.arch == 'arm')) }}
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: 更新版本号
      if: ${{ !((runner.os == 'Linux' && matrix.arch == 'x86') || (runner.os == 'Windows' && matrix.arch == 'arm')) }}
      env:
        PYTHONIOENCODING: utf-8
      run: |
        python "自动化脚本/修改版本号.py" "${{ github.event.inputs.version }}"

    - name: 更新架构信息
      if: ${{ !((runner.os == 'Linux' && matrix.arch == 'x86') || (runner.os == 'Windows' && matrix.arch == 'arm')) }}
      env:
        PYTHONIOENCODING: utf-8
      run: |
        python "自动化脚本/修改架构.py" "${{ matrix.arch }}"

    - name: 发布 - Windows - Any CPU
      if: ${{ runner.os == 'Windows' && matrix.arch != 'arm' }}
      run: |
        dotnet publish ghv/ghv.csproj --configuration Release --output ./output -r win-${{ matrix.arch }}
        dotnet publish ghv/ghv.csproj --configuration Release --output ./output_SingleFile -r win-${{ matrix.arch }} /p:PublishSingleFile=true /p:PublishTrimmed=true

    - name: 发布 - linux - x64/arm/arm64
      if: ${{ runner.os == 'Linux' && matrix.arch != 'x86' }}
      run: |
        dotnet publish ghv/ghv.csproj --configuration Release --output ./output -r linux-${{ matrix.arch }}
        dotnet publish ghv/ghv.csproj --configuration Release --output ./output_SingleFile -r linux-${{ matrix.arch }} /p:PublishSingleFile=true /p:PublishTrimmed=true

    - name: 创建发行文件 - Windows
      if: ${{ runner.os == 'Windows' && matrix.arch != 'arm' }}
      shell: pwsh
      run: |
        # 创建Release目录
        mkdir -p Release

        # 使用7z压缩为zip格式
        7z a -tzip Release/GitHubView-${{ github.event.inputs.version }}-${{ matrix.os }}-${{ matrix.arch }}.zip output/*
        7z a -tzip Release/GitHubView-${{ github.event.inputs.version }}-${{ matrix.os }}-${{ matrix.arch }}-SingleFile.zip output_SingleFile/*

        # 创建安装包
        curl -o "C:\Program Files (x86)\Inno Setup 6\Languages\ChineseSimplified.isl" "https://raw.githubusercontent.com/jrsoftware/issrc/main/Files/Languages/Unofficial/ChineseSimplified.isl"
        iscc installer/Windows.iss
        iscc installer/SingleFile/Windows.iss
        move installer/GitHubView-installer.exe Release/GitHubView-${{ github.event.inputs.version }}-${{ matrix.os }}-${{ matrix.arch }}-Setup.exe
        move installer/GitHubView-installer.exe Release/GitHubView-${{ github.event.inputs.version }}-${{ matrix.os }}-${{ matrix.arch }}-Setup-SingleFile.exe

        # 单独处理单文件
        move output_SingleFile/ghv.exe Release/GitHubView-${{ github.event.inputs.version }}-${{ matrix.os }}-${{ matrix.arch }}-SingleFile.exe

    - name: 创建发行文件 - Linux
      if: ${{ runner.os == 'Linux' && matrix.arch != 'x86' }}
      shell: bash
      run: |
        # 创建Release目录
        mkdir -pv Release

        # 使用tar压缩
        tar -czvf Release/GitHubView-${{ github.event.inputs.version }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz -C output .
        tar -czvf Release/GitHubView-${{ github.event.inputs.version }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz -C output_SingleFile .

        # 安装 dpkg
        sudo apt-get update
        sudo apt-get install -y dpkg

        # 复制 DEBIAN 控制文件
        cp -rpv installer/DEBIAN output
        cp -rpv installer/SingleFile/DEBIAN output_SingleFile

        # =======================================================
        # 创建安装目录结构
        mkdir -pv output/usr/local/bin
        mkdir -pv output/usr/local/lib/ghv
        mkdir -pv output/etc/ghv

        # 整理文件
        mkdir -pv output/usr/local/bin/ghv/
        mv -v output/ghv output/usr/local/bin/ghv/
        mv -v output/ghv.deps.json output/usr/local/bin/ghv/
        mv -v output/ghv.runtimeconfig.json output/usr/local/bin/ghv/
        mv -v output/ghv.dll output/usr/local/bin/ghv/
        mv -v output/Spectre.Console.dll output/usr/local/bin/ghv/
        mv -v output/ghv.pdb output/usr/local/bin/ghv/

        # 生成安装包
        dpkg --build output ghv.deb
        mv -v ghv.deb Release/GitHubView-${{ github.event.inputs.version }}-${{ matrix.os }}-${{ matrix.arch }}.deb

        # 验证安装包
        dpkg --info Release/GitHubView-${{ github.event.inputs.version }}-${{ matrix.os }}-${{ matrix.arch }}.deb
        dpkg --contents Release/GitHubView-${{ github.event.inputs.version }}-${{ matrix.os }}-${{ matrix.arch }}.deb

        # =======================================================
        echo "构建自发布版..."
        # 整理文件
        mkdir -pv output_SingleFile/usr/local/bin/ghv/
        mv -v output_SingleFile/ghv output_SingleFile/usr/local/bin/ghv/
        mv -v output_SingleFile/ghv.deps.json output_SingleFile/usr/local/bin/ghv/
        mv -v output_SingleFile/ghv.runtimeconfig.json output_SingleFile/usr/local/bin/ghv/
        mv -v output_SingleFile/ghv.dll output_SingleFile/usr/local/bin/ghv/
        mv -v output_SingleFile/Spectre.Console.dll output_SingleFile/usr/local/bin/ghv/
        mv -v output_SingleFile/ghv.pdb output_SingleFile/usr/local/bin/ghv/

        # 生成安装包
        dpkg --build output_SingleFile ghv.deb
        mv -v ghv.deb Release/GitHubView-${{ github.event.inputs.version }}-${{ matrix.os }}-${{ matrix.arch }}-SingleFile.deb

        # 验证安装包
        dpkg --info Release/GitHubView-${{ github.event.inputs.version }}-${{ matrix.os }}-${{ matrix.arch }}-SingleFile.deb
        dpkg --contents Release/GitHubView-${{ github.event.inputs.version }}-${{ matrix.os }}-${{ matrix.arch }}-SingleFile.deb

        # =======================================================
        echo "发布单文件..."
        # 单独处理单文件
        mv -v output_SingleFile/ghv Release/GitHubView-${{ github.event.inputs.version }}-${{ matrix.os }}-${{ matrix.arch }}-SingleFile

    - name: 上传发行文件
      if: ${{ !((runner.os == 'Linux' && matrix.arch == 'x86') || (runner.os == 'Windows' && matrix.arch == 'arm')) }}
      uses: actions/upload-artifact@v4
      with:
        name: ghv-${{ github.event.inputs.version }}-${{ matrix.os }}-${{ matrix.arch }}
        path: ./Release
